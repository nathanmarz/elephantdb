(ns elephantdb.common.spec-test
  (:use midje.sweet
        [elephantdb.test.common :only (berkeley-spec)])
  (:import [elephantdb DomainSpec Utils]
           [elephantdb.document KeyValDocument]))

;; ## DomainSpec Testing

(fact
  "DomainSpec equality is value-based, not instance-based."
  (DomainSpec. "elephantdb.persistence.JavaBerkDB"
               "elephantdb.partition.HashModScheme"
               2)
  => (DomainSpec. (elephantdb.persistence.JavaBerkDB.)
                  (elephantdb.partition.HashModScheme.)
                  2))

;; ## DomainSpec functionality

(defn round-trip-fn [spec]
  (let [serializer (Utils/makeSerializer spec)]
    (fn [item]
      (->> item
           (.serialize serializer)
           (.deserialize serializer)))))

(def test-spec
  (berkeley-spec 2))

(fact
  "Spec should only allow positive numbers for the shard-count."
  (berkeley-spec 10)  => truthy
  (berkeley-spec 0)   => (throws AssertionError)
  (berkeley-spec -10) => (throws AssertionError))

(defn round-trip
  "Serializes the supplied item back and forth using the serializer
  generated by `berkeley-spec`. Returns the round-tripped item."
  [item]
  (let [trip-fn (round-trip-fn test-spec)]
    (trip-fn item)))

(tabular
 (fact
   "Key Value documents should be able to be round-tripped through a
    serializer."
   (let [doc (KeyValDocument. ?key ?val)]
     (round-trip doc) => doc))
 ?key    ?val
 1       2
 "three" "four!")

